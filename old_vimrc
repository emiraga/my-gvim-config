if has('gui_running')
    " Maximize window on open
    " au GUIEnter * simalt ~x
    
    if $SHELL == '/bin/bash'
        " Set font
        set anti guifont=DejaVu\ Sans\ Mono\ 12

        " hide menu bar
        set guioptions-=m
    else
        " Set font
        set guifont=peep:b
    endif
    "set guifont=Terminal:bh14

    " hide toolbar
    set guioptions-=T

    " Show numbers only in current window
    "au WinEnter * setlocal number
    "au WinLeave * setlocal nonumber
endif

" Pathogen config needs this
filetype off
" call pathogen#runtime_append_all_bundles()
filetype plugin indent on

" Remove compatibility with old versions
set nocompatible

" Security issues, not sure if needed
" set modelines=0

" Better colors
syntax enable
colorscheme pablo 
" colorscheme ir_black

" Show numbers
set number
" set relativenumber " weird numbers

" Don't write backup files
set nobackup
set nowritebackup

" Nice tabs, tabs to spaces conversion
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Make things better, 
" according to http://stevelosh.com/blog/2010/09/coming-home-to-vim/
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden "allow creating hidden buffers
set wildmenu
set wildmode=list:longest
" set visualbell " blink screen
set noeb
" set cursorline " highlight current line
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
" set undofile " save more undo files

" Allow to pass by end of the line
" set virtualedit=all

" Useful for html/xml
set matchpairs+=<:>

" Put dolar sign at the end of change
set cpoptions+=$

" Visible the invisible characters
set nolist
set listchars=tab:>\ ,eol:$

" Set leader key, originally "g" now it is ","
let mapleader = ","

" Smart searching
" nnoremap / /\v
" vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set hlsearch
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

" Never, ever do 'set showmatch'

" Handle long lines correctly
set wrap
set textwidth=79
set formatoptions=qrn1

" Highlight end of lines which are longer than 80 characters
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" Save on loosing focus
au FocusLost * :wa

" Disable F1 help key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Shift movement keys in touch typing position
nnoremap j h
nnoremap k gj
nnoremap l gk
nnoremap ; l

vnoremap j h
vnoremap k j
vnoremap l k
vnoremap ; l

onoremap j h
onoremap k j
onoremap l k
onoremap ; l

" Some abbreviations, misspellings
abbreviate teh the
abbreviate itn int
abbreviate adn and

" When reach end of line, keep moving the cursor.
set whichwrap=h,l,~,[,]

" Move through split windows using arrow keys
nnoremap <Left> <C-w>h
nnoremap <Down> <C-w>j
nnoremap <Up> <C-w>k
nnoremap <Right> <C-w>l

" Move through split windows using arrow keys
nnoremap <S-Left> <C-w>H
nnoremap <S-Down> <C-w>J
nnoremap <S-Up> <C-w>K
nnoremap <S-Right> <C-w>L

" Easier escape mode
inoremap jj <Esc>
cnoremap jj <C-c>

" In insert mode
"inoremap <Left> <esc><C-w>ha
"inoremap <Down> <esc><C-w>ja
"inoremap <Up> <esc><C-w>ka
"inoremap <Right> <esc><C-w>la

" Use space/backspace, for Page-down/Page-up
nnoremap <Space> <PageDown>
nnoremap <BS> <PageUp>

" Ctrl+space for next tag
nnoremap <C-Space> <C-PageDown>
nnoremap <C-BS> <C-PageUp>

" Ctrl+left/right for next/prev buffer
nnoremap <C-Left> :bn<CR>
nnoremap <C-Right> :bp<CR>

" Ctrl+K/L for next/prev buffer
nnoremap <C-K> :bn<CR>
nnoremap <C-L> :bp<CR>

" Use system clipboard on windows
set clipboard=unnamed

" to get into the current directory
function AlwaysCD()
  if bufname("") !~ "^ftp://"
      lcd %:p:h
  endif
endfunction
autocmd BufEnter * call AlwaysCD()

if $SHELL == '/bin/bash'
    " copying macro for linux
    vmap <C-C> "+y
    map <C-V> "+gP
    map <C-A> ggVG
    map <C-X> "+x
endif

" NERD Tree
map <F2> :NERDTreeToggle<cr>
let NERDTreeIgnore=['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$']

" Add menu for NERDtree
amenu NERDtree.m_tc :NERDTree m:\tc\<CR>
amenu NERDtree.python :NERDTree c:\py\<CR>
amenu NERDtree.nodejs :NERDTree m:\github.com\emiraga\<CR>

" Some keyboard shortcuts for fugitive (GIT wrapper for vim), Ctrl+left/right
"nnoremap <C-Right> :silent!cp<CR>
"nnoremap <C-Left> :silent!cn<CR>

" Menu for fugitive
amenu &GIT.&write <ESC>:silent!Gwrite<CR>
amenu &GIT.&commit <ESC>:silent!Gcommit<CR>
amenu &GIT.&read <ESC>:silent!Gread<CR>
amenu &GIT.&log <ESC>:silent!Glog<CR>
amenu &GIT.real_log <ESC>:silent Git log & pause<CR>

amenu &GIT.diff <ESC>:silent!Gdiff<CR>
amenu &GIT.real_&diff <ESC>:silent Git diff & pause<CR>
amenu &GIT.real_diff_&HEAD <ESC>:silent Git diff HEAD & pause<CR>

amenu &GIT.&status <ESC>:silent!Gstatus<CR>
amenu &GIT.real_status <ESC>:silent Git status & pause<CR>
amenu &GIT.&push_origin_master <ESC>:silent Git push origin master<CR>

" Status bar for fugitive
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

"""""""""""""""""""""""""""""""""""""""
" Related to programming competitions "
"""""""""""""""""""""""""""""""""""""""

if $SHELL == "/bin/bash"
    source ~/.vim/snippetsMenu
    "source ~/.vim/snippetsHighlight
else
    " Load menu with all available snippets
    source ~/vimfiles/snippetsMenu
    " Highlight elements from template, plugin
    source ~/vimfiles/snippetsHighlight
    " Highlights certain words with red color, plugin
    Highlight 1 \<\(D\|Dv\|Da\|D2\|D3\|D4\|D5\|sleep\|assert\)\>
endif


" Error marker plugin
let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat

" F4 - background compile a file
map <silent><F4> :update<CR>:silent make %.exe<CR>

if $SHELL == '/bin/bash'
    " For linux
    " F5 - Compile a file and run in foreground
    map <F5> :update<CR>:!ulimit -c unlimited && make %.exe
                \ && ./%.exe \|\| gdb -q ./%.exe -c ./core<CR>
    map <silent><F6> :update<CR>:silent !gnome-terminal 
                \ --working-directory=%:p:h -e "bash -c 'ulimit -c unlimited; 
                \ make %.exe && ( ./%.exe && read \|\| gdb -q ./%.exe -c 
                \ ./core ) \|\| read'"<CR>
    map <F8> :update<CR>:!ulimit -c unlimited && make %.exe
                \ && ./%.exe < input.txt \|\| gdb -q ./%.exe -c ./core<CR>
else
    " For windows
    " F5 - Compile a file and run in foreground, wait for "pause"
    map <F5> :update<CR>:silent !make %.exe && %.exe \|\| 
        \ echo run \| gdb -q %.exe & pause<CR>
endif

" Contents of a Makefile (without <code> tags)
"
"<code>
"%.exe : %
"       g++ -D MYCOMP -g -lm $< -o $@
"</code>
" Note: I use custom define MYCOMP. (See: vimfiles/add_to_template.cpp)
" Node2: That is an actual TAB character, no spaces.

""""""""""""""""""""""""""""""""""""""""""""""""""
" LEADER MAPING
" don;t have one command to be a prefix od another
""""""""""""""""""""""""""""""""""""""""""""""""""

" Open "input.txt" in split window
map <leader>i <C-w>v<C-w>l:open input.txt<CR>

" Leader,g - Compile a file and run with debugger
map <leader>d :update<CR>:silent !make %.exe && gdb -q %.exe<CR>

" strip all trailing whitespace in the current file so I can clean things up
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" I use Ack a lot (described below), so I mapped a leader key for it:
nnoremap <leader>a :Ack

" I work with HTML often, so I have ,ft mapped to a “fold tag” function:
nnoremap <leader>ft Vatzf

" CSS properties sorted, so here’s a ,S mapping that sorts them for me:
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>

" This next function is to re-hardwrap paragraphs of text:
nnoremap <leader>q gqip

" open a new horizontal split and switch over to it.
nnoremap <leader>w <C-w>s<C-w>l

" open a new vertical split and switch over to it.
nnoremap <leader>s <C-w>v<C-w>l

" edit my _gvimrc

if $SHELL == "/bin/bash"
    nnoremap <leader>v :e $HOME/.vimrc<cr>
else
    nnoremap <leader>v :e $HOME/_gvimrc<cr>
endif

