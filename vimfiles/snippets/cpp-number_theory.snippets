snippet genprimes
	#define MAXP 1000000
	bool primes[MAXP];
	vector<int> plist;

	void genprimes() 
	{
		plist.clear();
		int m = (int)sqrt(int(MAXP));
		primes[0]=primes[1]=0;
		for(int i=2;i<MAXP;i++) primes[i] = 1;
		for(int i=2;i<=m;i++)
			if (primes[i])
				for(int j=i*i;j<MAXP;j+=i) primes[j] = 0;
		for(int i=2;i<MAXP;i++)if(primes[i])plist.push_back(i);
	}

snippet choose
	LL choose;
	For(i,1,50)
	{
		choose[i][0]=choose[i][i]=1;
		For(j,1,i)
		{
			choose[i][j] = choose[i-1][j]+choose[i-1][j-1];
		}
	}

snippet ncr
	// ncr calculating
	SET( ncr, 0 );
	ncr[0][0] = 1;
	FOR(i,1,n) {
		ncr[i][0] = 1;
		FOR(j,1,n) ncr[i][j] = ncr[i-1][j] + ncr[i-1][j-1];
	}

snippet egcd
	template<class T> inline T egcd(T a,T b,T &X,T &Y)
	{
		if(a<0)	{ T d=egcd(-a,b,X,Y); X=-X; return d;	}
		if(b<0) { T d=egcd(a,-b,X,Y); Y=-Y; return d; }
		if(b==0) { X=1; Y=0; return a; }
		else{
			T d=egcd(b,a%b,X,Y); T t=X;
			X=Y; Y=t-(a/b)*Y;
			return d;
		}
	}

snippet isprime2MillerRabin
	bool isprime2(long long p, int iteration){
	    if(p<2)
	        return false;
	    if(p!=2 && p%2==0)
	        return false;
	    long long s=p-1;
	    while(s%2==0)
	        s/=2;
	    for(int i=0;i<iteration;i++){
	        long long a=rand()%(p-1)+1,temp=s;
	        long long mod=powermod(a,temp,p);
	        while(temp!=p-1 && mod!=1 && mod!=p-1){
	            mod=multiplymod(mod,mod,p);
	            temp *= 2;
	        }
	        if(mod!=p-1 && temp%2==0)
	            return false;
	    }
	    return true;
	}

snippet factorize
	template<class T>
	inline vector<pair<T,int> > factorize(T n)
	{
		vector<pair<T,int> > R;
		for (T i=2;n>1;)
		{
			if (n%i==0)
			{
				int C=0;
				for (;n%i==0;C++,n/=i);
				R.push_back(make_pair(i,C));
			}
			i++;
			if (i>n/i) i=n;
		}
		if (n>1)
			R.push_back(make_pair(n,1));
		return R;
	}

snippet phi
	template<class T> T phi(T n) 
	{ 
		T result = n; 
		for(int i=2;i*i <= n;i++) { 
			if (n % i == 0) result -= result / i; 
			while (n % i == 0) n /= i; 
		}
		if (n > 1) result -= result / n; 
		return result; 
	}

snippet euler2Phi
	template<class T> inline T euler2(T n) 
	{
		vector<pair<T,int> > R=factorize(n);
		T r=n;
		for (int i=0;i<R.size();i++)
			r=r/R[i].first*(R[i].first-1);
		return r;
	}

snippet s_gcd_congr_modinv
	LL gcd( LL a, LL b ) {
		return !b ? a : gcd( b, a%b );
	}
	pii egcd( LL a, LL b ) {  // returns x,y | ax + by = gcd(a,b)
		if( b == 0 ) return make_pair( 1, 0 );
		else {
			pii d = egcd( b, a % b );
			return make_pair( d.y, d.x - d.y * ( a / b ) );
		}
	}
	LL congruence( int a, int b, int n ) { // finds ax = b(mod n) 
		int d = gcd( a, n );
		if( b % d != 0 ) return 1<<30; // no solution
		pii ans = egcd( a, n );
		LL ret = ans.x * ( b/d + 0LL ), mul = n/d;
		ret %= mul;
		if( ret < 0 ) ret += mul;
		return ret;
	}
	LL m_inverse( LL num, LL mod ) {
		pii p = egcd( num, mod );
		int ret = p.x % mod;
		if( ret < 0 ) ret += mod;
		return ret;
	}

snippet modinv
	pii egcd_2( LL a, LL b ) {  // returns x,y | ax + by = gcd(a,b)
		if( b == 0 ) return make_pair( 1, 0 );
		else {
			pii d = egcd_2( b, a % b );
			return make_pair( d.y, d.x - d.y * ( a / b ) );
		}
	}
	LL modinv( LL num, LL mod ) {
		pii p = egcd_2( num, mod );
		int ret = p.x % mod;
		if( ret < 0 ) ret += mod;
		return ret;
	}

snippet sterling_1
	LL S[110][110];
	LL fact[110];
	fact[0] = 1;
	For(i,1,110)
		fact[i] = (fact[i-1] * i) % M;

	SET(S,0);
	For(n,1,110)
	{
		S[n][n] = 1;

		S[n][1] = fact[n-1];
		if(n%2 == 0) S[n][1] *= -1;

		For(k,2,n)
		{
			S[n][k] = ( - (n-1)*S[n-1][k] + S[n-1][k-1] )%M;
		}
	}
	if(K==0)
		cout << (N==0) << endl;
	else
		cout << iabs(S[N][K]%M) << endl;

snippet sterling_2
	LL S[110][110];
	LL fact[110];
	fact[0] = 1;
	For(i,1,110)
		fact[i] = (fact[i-1] * i) % M;

	SET(S,0);
	For(n,1,110)
	{
		S[n][n] = 1;
		S[n][1] = 1;

		For(k,2,n)
		{
			S[n][k] = ( (k)*S[n-1][k] + S[n-1][k-1] )%M;
		}
	}
	if(K==0)
		cout << (N==0) << endl;
	else
		cout << iabs(S[N][K]%M) << endl;

snippet modpow
	Bignum modpow(Bignum base, Bignum exponent, Bignum modulus) {
	   Bignum result = 1;
	   while (exponent > 0) {
		 if ((exponent & 1) == 1) {
			// multiply in this bit's contribution while using modulus to keep result small
			result = (result * base) % modulus;
		 }
		 // move to the next bit of the exponent, square (and mod) the base accordingly
		 exponent >>= 1;
		 base = (base * base) % modulus;
	  }
	  return result;
	}

snippet totient
	FOR(i,1,M) f[i] = i;
	FOR(n,2,M) if( f[n] == n ) for(int k=n; k<=M; k+=n) f[k] *= n-1, f[k] /= n;

snippet sieve_bits
	const int MAX = 100000000;
	int p[ MAX/64 + 2 ];
	int np = 0;

	#define on(x) ( p[x/64] & (1<<( (x%64)/2 ) ) )
	#define turn(x)  p[x/64] |= (1<<( (x%64)/2 ) )

	void sieve() {
		for(int i=3;i*i<MAX; i+=2) 	{
			if( !on(i) ) {
				int ii = i*i;
				int i2 = i+i;
				for(int j=ii; j<MAX; j+=i2) turn(j);
			}
		}
	}

	inline bool prime( int num ) {
		return num > 1 && ( num == 2 || ( (num&1) && !on( num ) ) ); 
	}

snippet karatsuba
	#ifndef TH
	#define TH 10
	#endif

	// ret must be 6 times larger than len
	// len must be power of two
	void karatsuba(int *a, int *b, int *ret, int len) {
		if(len <= TH) {
			REP(i,2*len) ret[i]=0;
			REP(i,len) REP(j,len) ret[i+j]+=a[i]*b[j];
			return;
		}
		int m = len/2;
		int *a0 = a, *a1 = a+m;
		int *b0 = b, *b1 = b+m;
		int *asum = ret + 5*len, *bsum=ret+5*len+m;
		int *x1 = ret, *x2 = ret+len, *x3 = ret+2*len;
		REP(i,m) { asum[i] = a0[i] + a1[i]; bsum[i] = b0[i] + b1[i]; }
		karatsuba(a0, b0, x1, m);
		karatsuba(a1, b1, x2, m);
		karatsuba(asum,bsum,x3,m);
		REP(i,len) x3[i] -= x1[i]+x2[i];
		REP(i,len) ret[i+m] += x3[i];
	}
	//  int la = strlen(a_);
	//  int lb = strlen(b_);
	//  int len = max(la,lb);
	//  while(len != (len&-len)) len += len&-len;
	//  SET(a,0);
	//  SET(b,0);
	//  REP(i,la) a[-1-i+la] = a_[i]-'0';
	//  REP(i,lb) b[-1-i+lb] = b_[i]-'0';
	//  //REP(i,len) printf("%d ", a[i]); printf("\n");
	//  //REP(i,len) printf("%d ", b[i]); printf("\n");
	//  karatsuba(a,b,c,len);
	//  int carry = 0;
	//  REP(i,2*len) {
	//    assert(c[i]>=0);
	//    int m = carry + c[i];
	//    c[i] = m%10;
	//    carry = m/10;
	//  }
	//  int pos = 2*len-1;
	//  for(;carry;pos++) {
	//    c[pos] = carry%10;
	//    carry/=10;
	//  }
	//  while(c[pos]==0) pos--;
	//  FORD(i,pos,0) putchar('0'+c[i]);
	//  if(pos<0)putchar('0');
	//  printf("\n");

