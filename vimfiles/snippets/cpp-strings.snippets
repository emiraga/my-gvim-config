snippet kmp_explained
	f[ len ] = the longest suffix that we can still use for matching if its mismatched at len

	f[0] = f[1] = 0;
	FOR(i,2,len) {
		int j = f[i-1]; // think as a recursion - last best matching
		while( true ) {
			if( s[j] == s[i-1] ) { // we got a way to maximize
				f[i] = j + 1;
				break;
			}else if( !j ) { // suicide
				f[i] = 0;
				break;
			}else j = f[j]; // think recursively, we couldn't use s[i-1] to improve the match for j
			// now we'll go for the best suffix of j and check if we can improve that by using s[i-1]  
		}	
	}

	i = j = 0;
	while( true ) {
		if( i == len ) break;
		if( text[i] == s[j] ) { // we got an improve
			i++, j++;
			if( j == slen ) // match found
		}else if( j > 0 ) j = f[j]; // then we'll check again if we can improve at i
		else i++;
	}


snippet aho_corasick
	#define NC 26
	#define NP 10005
	#define M 100005
	#define MM 500005
	char a[M];
	char b[NP][105];
	int nb, cnt[NP], lenb[NP], alen;
	int g[MM][NC], ng, f[MM], marked[MM];
	int output[MM], pre[MM];

	#define init(x) { REP(_i,NC) g[x][_i] = -1; f[x] = marked[x] = 0; output[x] = pre[x] = -1; }

	void match() {
			
		ng = 0;
		init( 0 );	

		// part 1 - building trie
		REP(i,nb) {
			cnt[i] = 0;
			int state = 0, j = 0;
			while( g[ state][ b[i][j] ] != -1 && j < lenb[i] ) state = g[state][b[i][j]], j++;
			while( j < lenb[i] ) {
				g[state][ b[i][j] ] = ++ng;
				state = ng;
				init( ng );
				++j;
			}
			if( ng >= MM ) { cerr <<"i am dying"<<endl; while(1); // suicide }
			output[ state ] = i;
		}

		// part 2 - building failure function
		queue< int > q;
		REP(i,NC) if( g[0][i] != -1 ) q.push( g[0][i] );
		
		while( !q.empty() ) {
			int r = q.front(); q.pop();
			REP(i,NC) if( g[r][i] != -1 ) {
				int s = g[r][i];
				q.push( s );
				int state = f[r];
				while( g[state][i] == -1 && state ) state = f[state];
				f[s] = g[state][i] == -1 ? 0 : g[state][i];
			}
		}
		
		// final smash
		int state = 0;
		REP(i,alen) {
			while( g[state][a[i]] == -1 ) {
				state = f[state];
				if( !state ) break;
			}
			state = g[state][a[i]] == -1 ? 0 : g[state][a[i]];
			if( state && output[ state ] != -1 ) marked[ state ] ++; 
		}

		// counting
		REP(i,ng+1) if( i && marked[i] ) {
			int s = i;
			while( s != 0 ) cnt[ output[s] ] += marked[i], s = f[s];
		}
	}
