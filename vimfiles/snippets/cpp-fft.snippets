
snippet FFTslow
	typedef double dbl;
	typedef complex<dbl> cdbl;
	class FFT {
	public:
		const vector<cdbl> &input;
		int N,L,id;
		vector<cdbl> coef;
		FFT(const vector<cdbl> &in) : input(in) { }
		FFT(const vector<cdbl> &in, int oper, int reqN) : input(in) { doit(oper,reqN); }
		void Fill(int m,int d)
		{
			if (m==N)
			{
				if(id<L) coef[d]=input[id++]; else coef[d] = 0;
			}
			else
				Fill(m*2,d), Fill(m*2,d+m);
		}
		void doit(int oper, int reqN)
		{
			L = input.size();
			for(N=reqN; N!=lowbit(N); N+=lowbit(N));
			coef.resize(N);
			if(N==0)
				return;
			id = 0;
			Fill(1,0);
			for (int d=0;(1<<d)<N;d++)
			{
				int m=(1<<d);
				cdbl wn = exp(cdbl(0,2*PI/dbl(m*2)*dbl(oper)));
				for (int i=0;i<N;i+=(m*2))
				{
					cdbl w = 1;
					for (int j=0;j<m;j++)
					{
						cdbl temp = coef[i+j+m] * w;
						coef[i+j+m] = coef[i+j] - temp;
						coef[i+j] += temp;
						w*=wn;
					}
				}
			}
		}
		void div() { Rep(i,N) coef[i] /= N; }
	};
	//  while(A[la-1] == '0') { zeros++; A[--la]=0; }
	//  int N = la+lb;
	// while(N!=lowbit(N))N+=lowbit(N);
	// a.resize(la); Rep(i,la) a[i] = cdbl(A[i]-'0',0);
	// FFT ff1(a,1,N);

snippet FFTfast
	typedef double dbl;
	class cdbl
	{ public: dbl a,b; 
	      cdbl(){};
	      cdbl( dbl _a, dbl _b) {a=_a;b=_b;}
	};
	const dbl pi = acos(dbl(-1));
	const int M = 1<<15+1;
	cdbl coef[M];
	cdbl coef2[M];
	void FFT(int oper, int N)
	{
		for (int d=0;(1<<d)<N;d++)
		{
			int m=(1<<d);
			dbl p0=2*pi/dbl(m*2)*dbl(oper);
			dbl sinp0=sin(p0);
			dbl cosp0=cos(p0);
			for (int i=0;i<N;i+=(m*2))
			{
				dbl sinp=0;
				dbl cosp=1;
				for (int j=0;j<m;j++)
				{
					dbl ta=cosp*coef[i+j+m].a-sinp*coef[i+j+m].b;
					dbl tb=cosp*coef[i+j+m].b+sinp*coef[i+j+m].a;
					coef[i+j+m].a=coef[i+j].a-ta;
					coef[i+j+m].b=coef[i+j].b-tb;
					coef[i+j].a+=ta;
					coef[i+j].b+=tb;  
					dbl tsinp=sinp;
					sinp=sinp*cosp0+ cosp*sinp0;
					cosp=cosp*cosp0-tsinp*sinp0;   
				}
			}
		}
	}
	//use bitreverse_table
	//	while(a[la-1] == '0') { addzero++; a[--la] = 0;}
	//	int N = la + lb;
	//	while(N != lowbit(N))N+=lowbit(N);
	//	int cbit=0,Nc=N; while(Nc/=2)cbit++;
	//	cbit = 24 - cbit;

	//	memset(coef,0,sizeof(cdbl) * N);
	//	Rep(i,la)   coef[ bitreverse(i)>>cbit ] = cdbl(a[i] - '0',0);
	//	FFT(1,N);

snippet bitreverse_table
	static const unsigned char BitReverseTable256[] = 
	{
	  0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0, 
	  0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 
	  0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4, 
	  0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC, 
	  0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 
	  0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
	  0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6, 
	  0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
	  0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
	  0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9, 
	  0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
	  0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
	  0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3, 
	  0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
	  0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7, 
	  0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
	};
	//reverse only 24 bits
	#define bitreverse(v) ((BitReverseTable256[v & 0xff] << 16) | \
	    (BitReverseTable256[(v >> 8) & 0xff] << 8) | \
	    (BitReverseTable256[(v >> 16) & 0xff]))
	//reverse all 32 bits
	#define bitreverse(v) ((BitReverseTable256[v & 0xff] << 24) | \
    (BitReverseTable256[(v >> 8) & 0xff] << 16) | \
    (BitReverseTable256[(v >> 16) & 0xff] << 8) | \
    (BitReverseTable256[(v >> 24) & 0xff]))
